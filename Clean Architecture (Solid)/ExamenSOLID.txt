1. ¿Qué es problemático con este código desde el punto de vista del diseño? ¿Puede relacionarlo con una violación de uno de
los principios de diseño. Explicar brevemente



public abstract class Feline {
  private int age;
  private double weight;
  private double top_speed;

  public void run(double newSpeed) { ... }
  private void eat(double portionSize) { ... }
  // ... -> getXXX() and setXXX() methods here
}

public class Tiger extends Feline {
  private String breed;

  public Tiger(int age, double wt, double sp, String br) {
    this.breed = br;
    setAge(age);
    setWeight(wt);
    setTopSpeed(sp);
  }
  private void run(double newSpeed) { ... }
  public void camouflage() { ... }
  
  // ... -> getXXX() and setXXX() methods here
}
*****************************************************************************
//R/ Al principio el codigo se encuentra bien, en la extension de la clase tiger se supone que todos los tiger deben ser Feline,
//pero el metodo RUN en la clase tiger se enceuntra privado lo cual no puede ser visto desde afuera y el run de Feline
//si es publico, en ese sentido como el metodo run de tiger tiene restricción no pueden ser Feline. 
//Se esta violando el principio 3 de Liskov el cual refiere de sustitución, que si una clase es extendida debe poderse utilizar 
//en cualquiera de sus clases hijas.



2. Dé una razón básica de por qué "agregar personas a un proyecto tardío lo hace aún más tarde".

//R/ Agregar más personas puede hacer el proyecto más tarde ya que se superpondra el codigo ya realizado por los desarrolladores
//anteriores que tienen expriencia, además que el tiempo de capacitación y curva de aprendizaje para los nuevos afecta el avance del proyecto.

3. Aplique el principio de responsabilidad unica:


Metodo que orquesta llamadas a componentes que cada uno tiene otras responsabilidades

void processTransaction(Transaction t) {
  if (isFraud(t)) { // Business logic
    // External integration: logging
    logger.log("Detected fraud transaction {}", t);
    // Integration with external service
    alertingService.sendAlert(new FraudTransactionAlert(t));
  }
}

***********************************************************
class TransactionProcess {
  
  
  void processTransaction(Transaction t) {
    boolean isFraud;
  }
}
  
 class TransactionFraud {
	private final AlertingService alertingService;
	void detectedFraud(Transaction t) {
    logger.log("Detected fraud transaction {}", t);
    alertingService.sendAlert(new FraudTransactionAlert(t));
  }
 }



4. Aplique el principio de sustitución de liskov para la imagen
public interface Session {
void DatabaseAccess();
void BusinessLogic();
}

public void UiLayer {
	//interfaz de usuario
}

public class BusinessLogic implements Session {
	//logica de negocio
}

public class DatabaseAccess implements Session {
	//Logica de acceso
}


5.   Nuestra aplicación bancaria admite dos tipos de cuentas: "corriente" y "ahorros".


public abstract class Account {
    protected abstract void deposit(BigDecimal amount);

    /**
     * Reduces the balance of the account by the specified amount
     * provided given amount > 0 and account meets minimum available
     * balance criteria.
     *
     * @param amount
     */
    protected abstract void withdraw(BigDecimal amount);
}


public class BankingAppWithdrawalService {
    private Account account;

    public BankingAppWithdrawalService(Account account) {
        this.account = account;
    }

    public void withdraw(BigDecimal amount) {
        account.withdraw(amount);
    }
}


El banco ahora quiere ofrecer a sus clientes una cuenta de depósito a plazo fijo con altos intereses.

Para apoyar esto, introduzcamos una nueva clase FixedTermDepositAccount . Una cuenta de depósito a plazo fijo en el mundo real "es un" tipo de cuenta. Esto implica herencia en nuestro diseño orientado a objetos.

Entonces, hagamos FixedTermDepositAccount una subclase de Account:

public class FixedTermDepositAccount extends Account {
    // Overridden methods...
}


Hasta aquí todo bien. Sin embargo, el banco no quiere permitir retiros de cuentas de depósito a plazo fijo.

Esto significa que la nueva clase FixedTermDepositAccount no puede proporcionar de manera significativa el método de retiro que define Account . Una solución para esto es hacer que FixedTermDepositAccount arroje una UnsupportedOperationException en el método que no puede cumplir:
public class FixedTermDepositAccount extends Account {
    @Override
    protected void deposit(BigDecimal amount) {
        // Deposit into this account
    }

    @Override
    protected void withdraw(BigDecimal amount) {
        throw new UnsupportedOperationException("Withdrawals are not supported by FixedTermDepositAccount!!");
    }
}




Test:


Account myFixedTermDepositAccount = new FixedTermDepositAccount();
myFixedTermDepositAccount.deposit(new BigDecimal(1000.00));

BankingAppWithdrawalService withdrawalService = new BankingAppWithdrawalService(myFixedTermDepositAccount);
withdrawalService.withdraw(new BigDecimal(100.00));


Output: Withdrawals are not supported by FixedTermDepositAccount!!


/****/

¿Qué salió mal?
Resuelva este problema con el princpio de sustitución de Liskov

*************************************************************************************************************
//R/ Salio mal que BankingAppWithdrawalService no esta referenciando a class account. Y por lo cual no se procesa
//el metodo FixedTermDepositAccount, queriendo decir que no es viable sustituir el metodo por account.

//Como solución account seria ahora la clase principal
public class BankingAppWithdrawalService {
    private WithdrawmoneyAccount withdrawmoneyAccount;

    public BankingAppWithdrawalService(WithdrawmoneyAccount withdrawmoneyAccount) {
        this.withdrawmoneyAccount = withdrawmoneyAccount;
    }

    public void withdraw(BigDecimal amount) {
        withdrawmoneyAccount.withdraw(amount);
    }
}




6.  Imagina que mi programa tuviera una clase Player que implementa un método makeMove ():



public class Player {

    private final String mark;

    public Player(String mark) {
        this.mark = mark;
    }

    public String makeMove(Ui ui, Grid grid) {
        ui.promptForPosition();           // prompts user to input
                                             a position on grid
        String positionChosen = ui.chooseValidPosition(grid);
        return positionChosen;   // returns a valid position on grid
                                    that user has entered as string
    }
}

Entonces tendría una clase GameFlow que implementa un método runGame y crea dos instancias de Player:

public class GameFlow {
 
  private Player playerOne;
  private Player playerTwo;
  public GameFlow() {
     this.playerOne = new Player(String mark);
     this.playerTwo = new Player(String otherMark)     
     // more classes instantiations
  }
  // some code
public void runGame() {
      Player currentPlayer = playerOne;
      while (!isGameEnded()) {
          String positionChosen = currentPlayer.makeMove(ui, grid);
          grid.addMark(currentMark, positionChosen);
          currentPlayer = switchPlayer();
      }
  }
  
  // more code
}

Una semana después, mis mentores me piden que agregue una nueva función a mi TTT: el usuario debería poder elegir jugar contra otro jugador humano o contra la computadora. Podría cambiar mi clase Player y agregar un método adicional makeRandomMove (la computadora hace un movimiento válido aleatorio: no tiene que ser imbatible por ahora):

public class Player {
    private final String mark;

    public Player(String mark) {
        this.mark = mark;
    }

    public String makeMove(Ui ui, Grid grid) {
       // code for human player
    }
    public String makeRandomMove(Grid grid) {
       String randomPosition = grid.possibleMoves.get(new 
         Random().nextInt(grid.possibleMoves.size()));
       return randomPosition;  // returns a random position on grid
                                   as a string    
    }
}

Mi método runGame en la clase GameFlow también debería cambiarse a algo como esto:

public class GameFlow {
  private Player playerOne;
  private Player playerTwo;
  public GameFlow() {
     this.playerOne = new Player(String mark);
     this.playerTwo = new Player(String otherMark)     
     // more classes instantiations
  }
  // some code
public void runGame() {
      Player currentPlayer = playerOne;
      while (!isGameEnded()) {
         if (currentPlayerType is "human") {     // pseudo-code
            String position = currentPlayer.makeMove(ui, grid);
         } else if (currentPlayerType is "computer") { //pseudo-code
             String position = currentPlayer.makeRandomMove(grid);
         }
         grid.addMark(currentMark, positionChosen);
         currentPlayer = switchPlayer();
        }
    }
  
   // more code
}


Siguiente requisito de mis mentores: ¡el usuario también puede elegir jugar contra una computadora imbatible! ARGH !! Necesito volver a cambiar las clases Player y GameFlow ...



Solucionar con el principio de abierto y cerrado.

*****************************************************************************
public interface Player {
    String makeMove(Ui ui, Grid grid);
}

public class PlayersMode {
    public Player opponent(String opponentType, String mark) {
        if (opponentType is "human") {   
          return new Human(mark);
        } else if (opponentType is "computer") {  
          return new Computer(otherMark);
        } 
    }
}

public class GameFlow {
 
  private Player player;
  public GameFlow() {
     this.player = new PlayersMode().creatingPlay(String mark);
  }
  public void runGame() {
      while (!isGameEnded()) {
          String positionChosen = player.makeMove(ui, grid);
          grid.addMark(currentMark, positionChosen);
          switch player;
      }
  }
}


7. Transforme el diagrama con el principio de segregación de interfaces. (Imagen SLACK)

//En imagen (diagrama modificado segregación interfaces)


8. Aplique el principio de segregación de interfaces.


public interface BookAction {

    void seeReviews();
    void searchSecondhand();
    void listenSample();

}


class HardcoverUI implements BookAction {

    @Override
    public void seeReviews() {...}

    @Override
    public void searchSecondhand() {...}

    @Override
    public void listenSample() {...}

}

class AudiobookUI implements BookAction {

    @Override
    public void seeReviews() {...}

    @Override
    public void searchSecondhand() {...}

    @Override
    public void listenSample() {...}

}

*****************************************************************
public interface BookAction {
    void seeReviews();
}

public interface HardcoverAction extends BookAction {
    void searchSecondhand();
}

public interface AudioAction extends BookAction {
    void listenSample();
}

class HardcoverUI implements HardcoverAction {
    @Override
    public void seeReviews() {...}
    @Override
    public void searchSecondhand() {...}
}

class AudiobookUI implements AudioAction {
    @Override
    public void seeReviews() {...}
    @Override
    public void listenSample() {...}
}

9.  Liste las ideas de Martin Fowler https://martinfowler.com/articles/dipInTheWild.html en el apartado: You mean Dependency Inversion, Right?
- Dependency Injection
- Inversion of Control
- Dependency Inversion Principle


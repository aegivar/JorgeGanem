interface IAve {  
    void volar();
    void comer();
    void nadar();
}

class Loro implements IAve{

    @Override
    public void volar() {
        //...
    }

    @Override
    public void comer() {
        //...
    }

    @Override
    public void nadar() {
        //...
    }
}

class Pinguino implements IAve{

    @Override
    public void volar() {
        //...
    }

    @Override
    public void comer() {
        //...
    }

    @Override
    public void nadar() {
        //...
    }
}
*************************************************************************************
//La inconsistencia en el codigo es en las dos clases, ya que el loro no nada 
//y los pinguinos no vuelan. Se refleja que las clases no deben depender de metodos
//que no se usan. y si se quisiera a√±adir otro metodo se tendria que reccorer
//todas las clases donde se implmenta lo cual es una mala practica y se viola la 
//responsabilidad unica. 

interface IAve {  
    void comer();
}

interface IAveNadadora {  
    void nadar();
}

interface IAveVoladora {  
    void volar();
}

class Loro implements IAve, IAveVoladora{

    @Override
    public void volar() {
        //...
    }

    @Override
    public void comer() {
        //...
    }
}

class Pinguino implements IAve, IAveNadadora{

    @Override
    public void nadar() {
        //...
    }

    @Override
    public void comer() {
        //...
    }
}